// -------------------------------------
//   Helpers
// -------------------------------------
// ----- Placeholders, Extends, Mixins, and Functions
// -------------------------------------


// -------------------------------------
//   Functions
// -------------------------------------

// -- REM Funciton - See Mixin
@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);  
}


// -------------------------------------
//   Mixins
// -------------------------------------

// -- REM Mixin
// usage: http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */
  @each $value in $values { /* 4 */
    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }
    @else { 
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */
      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }
      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }
  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}


// -- Clearfix Mixin
// example: @include clearfix();
@mixin clearfix() {
    & {
        *zoom: 1;
    }
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}


// -- Transition
// example: @include single-transition(background, 1s, ease-in-out, 0);
@mixin single-transition($property, $duration, $timing-function, $delay) {
  -webkit-transition: $property $duration $timing-function $delay;
  -moz-transition: $property $duration $timing-function $delay;
  -o-transition: $property $duration $timing-function $delay;
  transition: $property $duration $timing-function $delay;
}
// example: @include double-transition(background, 1s, ease-in-out, 0, opacity, .1s, ease-in-out, 0);
@mixin double-transition($property1, $duration1, $timing-function1, $delay1, $property2, $duration2, $timing-function2, $delay2) {
  -webkit-transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
  -moz-transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
  -o-transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
  transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
}


// -- Breakpoints  
// example @include breakpoint(940){ width:80%; }
@mixin max-breakpoint($size) {
  @media only screen and (max-width : $size + px) { @content; }
}
@mixin min-breakpoint($size) {
  @media only screen and (min-width : $size + px) { @content; }    
}


// -- Retina Images
// example: @include retina("logo2x.png", 100, 50);
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width + px $height + px;
    //background-size: $width / 10 + rem $height / 10 + rem; // Use this if you've set HTML font size value to 62.5%
    background-size: $width / 16 + rem $height / 16 + rem;
  }
}


// -- Font Size
// example: @include font-size(13);
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

// -- Retina Images
// example: @include retina("logo2x.png", 100, 50);
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width + px $height + px;
    //background-size: $width / 10 + rem $height / 10 + rem; // Use this if you've set HTML font size value to 62.5%
    background-size: $width / 16 + rem $height / 16 + rem;
  }
}


// -- Justify Items Flexbox
@mixin flex-justify-content($justify-content:flex-start){
    $justify-content-old:start;
    $justify-content-middle:start;

    @if ($justify-content == flex-end){
        $justify-content-old:end;
        $justify-content-middle:end;
    } @else if ($justify-content == center){
        $justify-content-old:center;
        $justify-content-middle:center;
    } @else if ($justify-content == space-between){
        $justify-content-old:justify;
        $justify-content-middle:justify;
    } @else {
        $justify-content-old:start;
        $justify-content-middle:start;
    }

    -webkit-box-pack:$justify-content-old;
    -moz-box-pack:$justify-content-old;
    box-pack:$justify-content-old;

    -ms-flex-pack:$justify-content-middle;

    -webkit-justify-content:$justify-content;
    -moz-justify-content:$justify-content;
    -ms-justify-content:$justify-content;
    justify-content:$justify-content;
}


// -- Flex-flow is short hand for "flex-direction" & "flex-wrap"
@mixin flex-flow-row-wrap {
  // Safari - Pre Flex Flow
  -webkit-flex-direction: row;
  -webkit-flex-wrap: wrap;
  // MS - Pre Flex Flow
  -ms-flex-direction: row;
  -ms-flex-wrap: wrap;
  // Moz - Pre Flex Flow
  -moz-flex-direction: row;
  -moz-flex-wrap: wrap;
  // Flex Flow
  -webkit-flex-flow: row wrap;
  -moz-flex-flow: row wrap;
  -ms-flex-flow: row wrap;
  -webkit-flex-flow: row wrap;
  flex-flow: row wrap;
}

// -- Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in. 
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property
@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else { 
        -ms-flex-wrap: $value; 
    }
    flex-wrap: $value;
}


// -- Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in. 
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}


// -- Display Flex
@mixin flexbox-display-flex {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}


// -- Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property
@mixin flex($fg: 1, $fs: null, $fb: null) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}


// -- Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}


// -- Appearance for default browser settings
@mixin appearance {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}


// -- Zoom in cursor 
@mixin zoom-in {
  // cursor: pointer;
  cursor: -webkit-zoom-in;
  cursor: -moz-zoom-in;
  cursor: zoom-in;
}


// -- Zoom out cursor 
@mixin zoom-out {
  cursor: s-resize;
  cursor: -webkit-zoom-out;
  cursor: -moz-zoom-out;
  cursor: zoom-out;
}


// -------------------------------------
//   Placeholders
// -------------------------------------

// Image Replacement
%ir {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;
}

%ir:before {    
  content: "";
  display: block;
  width: 0;
  height: 150%;
}

// Clearfix
%clearfix, .clearfix {
  @include clearfix();   
}



// -------------------------------------
//   Utilities
// -------------------------------------

// Add class="img-responsive" to create responsive image
.img-responsive {
  display: block;
  height: auto;
  width: 100%;
  max-width: 100%;
}

.alert {
  color: $alert-red;
}

.no-pad {
  padding: 0 !important;
}

.no-margin {
  margin: 0 !important;
}

.float-l {
  float: left; 
}

.float-r {
  float: right;
}

.clear-both {
  clear: both;
}

.text-r {
  text-align: right;
}

.text-l {
  text-align: left;
}

.text-center {
  text-align: center;
}

.is-hidden {
  display: none !important;
}

.is-hidden--mobile {
  display: none !important;
  // -- Min Width @ $tablet
  @include min-breakpoint($tablet) { 
    display: block !important;
  }
}

.is-hidden--desktop {
  display: block !important;
  // -- Min Width @ $tablet
  @include min-breakpoint($tablet) {
    display: none !important;
  }
}

.is-full--mobile {
  width: 100% !important;
  // -- Min Width @ $tablet
  @include min-breakpoint($tablet) {
    width: auto !important;
  }
}

